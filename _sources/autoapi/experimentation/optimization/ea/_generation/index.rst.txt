:orphan:

:py:mod:`_generation`
=====================================================

.. py:module:: experimentation.optimization.ea._generation


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   experimentation.optimization.ea._generation.Generation




Attributes
~~~~~~~~~~

.. autoapisummary::

   experimentation.optimization.ea._generation.TPopulation


.. py:data:: TPopulation

   

.. py:class:: Generation


   Bases: :py:obj:`experimentation.database.HasId`, :py:obj:`sqlalchemy.orm.MappedAsDataclass`, :py:obj:`Generic`\ [\ :py:obj:`TPopulation`\ ]

   .. autoapi-inheritance-diagram:: experimentation.optimization.ea._generation.Generation
      :parts: 1

   Generic SQLAlchemy model for a generation.

   Inherit from this to create your own generation type and table.

   The generic parameter `TPopulation` refers to the user-defined population type.
   This parameter cannot be a forward reference.

   For example::

       class MyGeneration(Base, Generation[MyPopulation]):
           __tablename__ = "my_generation"

   .. py:method:: __init_subclass__(/, **kwargs: dict[str, Any]) -> None
      :classmethod:

      Initialize a version of this class when it is subclassed.

      Gets the actual type of `TPopulation` and stores it for later use.
      :param kwargs: Remaining arguments passed to super.



