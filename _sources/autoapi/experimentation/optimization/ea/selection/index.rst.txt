:py:mod:`selection`
===================================================

.. py:module:: experimentation.optimization.ea.selection

.. autoapi-nested-parse::

   Functions for selecting individuals from populations in EA algorithms.



Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   experimentation.optimization.ea.selection.multiple_unique
   experimentation.optimization.ea.selection.pareto_frontier
   experimentation.optimization.ea.selection.topn
   experimentation.optimization.ea.selection.tournament



.. py:function:: multiple_unique(selection_size: int, population: list[TIndividual], fitnesses: list[TFitness], selection_function: Callable[[list[TIndividual], list[TFitness]], int]) -> numpy.typing.NDArray[numpy.float_]

   Select multiple distinct individuals from a population using the provided selection function.

   :param selection_size: Amount of of individuals to select.
   :param population: List of individuals to select from.
   :param fitnesses: Fitnesses of the population.
   :param selection_function: Function that select a single individual from a population. ([TIndividual], [TFitness]) -> index.
   :returns: Indices of the selected individuals.


.. py:function:: pareto_frontier(frontier_values: list[list[TValues]], frontier_order: list[bool], to_take: int) -> list[int]

   Return individuals based on their respective frontier values and their domination order.

   For mor information on the pareto frontier check: https://en.wikipedia.org/wiki/Pareto_front.

   :param frontier_values: Lists of values that are used for the frontier. The order of the list represents the importance of a value in descending order. These values need to be numeric.
   :param frontier_order: List of orders for the values used in frontier selection. True = ascending, False = descending.
   :param to_take: The amount of individuals to return from the frontier.
   :returns: The index of the individuals that were selected. Returned in descending order, wrt. frontier values and domination order (Best is first).


.. py:function:: topn(n: int, genotypes: list[Genotype], fitnesses: list[Fitness]) -> list[int]

   Get indices of the top n genotypes sorted by their fitness.

   :param n: The number of genotypes to select.
   :param genotypes: The genotypes. Ignored, but argument kept for function signature compatibility with other selection functions/
   :param fitnesses: Fitnesses of the genotypes.
   :returns: Indices of the selected genotypes.


.. py:function:: tournament(rng: numpy.random.Generator, fitnesses: list[Fitness], k: int) -> int

   Perform tournament selection and return the index of the best individual.

   :param rng: Random number generator.
   :param fitnesses: List of finesses of individuals that joint the tournamente.
   :param k: Amount of individuals to participate in tournament.
   :returns: The index of te individual that won the tournament.


