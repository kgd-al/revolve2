:orphan:

:py:mod:`_modular_robot_sensor_state_impl_v2`
===========================================================================

.. py:module:: modular_robot_physical.remote._modular_robot_sensor_state_impl_v2


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot_physical.remote._modular_robot_sensor_state_impl_v2.ModularRobotSensorStateImplV2




.. py:class:: ModularRobotSensorStateImplV2(hinge_sensor_mapping: dict[modular_robot_physical._uuid_key.UUIDKey[revolve2.modular_robot.body.sensors.ActiveHingeSensor], int], hinge_positions: dict[int, float], imu_sensor_states: dict[modular_robot_physical._uuid_key.UUIDKey[revolve2.modular_robot.body.sensors.IMUSensor], modular_robot_physical.remote._imu_sensor_state_impl.IMUSensorStateImpl], camera_sensor_states: dict[modular_robot_physical._uuid_key.UUIDKey[revolve2.modular_robot.body.sensors.CameraSensor], modular_robot_physical.remote._camera_sensor_state_impl.CameraSensorStateImpl])


   Bases: :py:obj:`revolve2.modular_robot.sensor_state.ModularRobotSensorState`

   .. autoapi-inheritance-diagram:: modular_robot_physical.remote._modular_robot_sensor_state_impl_v2.ModularRobotSensorStateImplV2
      :parts: 1

   Implementation of ModularRobotSensorState for v2 robots.

   .. py:method:: get_active_hinge_sensor_state(sensor: revolve2.modular_robot.body.sensors.ActiveHingeSensor) -> revolve2.modular_robot.sensor_state.ActiveHingeSensorState

      Get sensor states for Hinges.

      :param sensor: The sensor to query.
      :returns: The Sensor State.


   .. py:method:: get_imu_sensor_state(sensor: revolve2.modular_robot.body.sensors.IMUSensor) -> revolve2.modular_robot.sensor_state.IMUSensorState

      Get the state of the provided IMU sensor.

      :param sensor: The sensor.
      :raises ValueError: If IMU sensors is not part of the robot.
      :returns: The state.


   .. py:method:: get_camera_sensor_state(sensor: revolve2.modular_robot.body.sensors.CameraSensor) -> revolve2.modular_robot.sensor_state.CameraSensorState

      Get the state of the provided camera sensor.

      :param sensor: The sensor.
      :raises ValueError: If sensor is not found on the robot.
      :returns: The camera sensor state.



