:py:mod:`brain`
=============================

.. py:module:: modular_robot.brain

.. autoapi-nested-parse::

   Modular robot brain interface and implementations.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   cpg/index.rst
   dummy/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot.brain.Brain
   modular_robot.brain.BrainInstance




.. py:class:: Brain


   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: modular_robot.brain.Brain
      :parts: 1

   The brain of a modular robot.

   Inherit from this to implement your own brain.
   Each brain implements the `make_instance` function,
   which create the actual brain instance that control the robot.
   The instance contains all the state associated with the control strategy;
   this class must be stateless.

   .. py:method:: make_instance() -> modular_robot.brain._brain_instance.BrainInstance
      :abstractmethod:

      Create an instance of this brain.

      :returns: The created instance.



.. py:class:: BrainInstance


   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: modular_robot.brain.BrainInstance
      :parts: 1

   An instance of a brain that perform the control of a robot.

   Instances of this class can be stateful.

   .. py:method:: control(dt: float, sensor_state: modular_robot.sensor_state.ModularRobotSensorState, control_interface: modular_robot._modular_robot_control_interface.ModularRobotControlInterface) -> None
      :abstractmethod:

      Control the modular robot.

      :param dt: Elapsed seconds since last call to this function.
      :param sensor_state: Interface for reading the current sensor state.
      :param control_interface: Interface for controlling the robot.



