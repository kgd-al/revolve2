:orphan:

:py:mod:`_cpg_network_structure`
========================================================

.. py:module:: modular_robot.brain.cpg._cpg_network_structure


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot.brain.cpg._cpg_network_structure.Cpg
   modular_robot.brain.cpg._cpg_network_structure.CpgPair
   modular_robot.brain.cpg._cpg_network_structure.CpgNetworkStructure




.. py:class:: Cpg


   Identifies a cpg to be used in a cpg network structure.

   .. py:attribute:: index
      :type: int

      


.. py:class:: CpgPair(cpg_1: Cpg, cpg_2: Cpg)


   A pair of CPGs that assures that the first cpg always has the lowest index.

   .. py:attribute:: cpg_index_lowest
      :type: Cpg

      

   .. py:attribute:: cpg_index_highest
      :type: Cpg

      


.. py:class:: CpgNetworkStructure(cpgs: list[Cpg], connections: set[CpgPair])


   Describes the structure of a CPG network.

   Can generate parameters for a CPG network, such as the initial state.

   .. py:property:: num_connections
      :type: int

      Get the number of connections in the structure.

      :returns: The number of connections.


   .. py:property:: num_states
      :type: int

      Get the number of states in a cpg network of this structure.

      This would be twice the number of CPGs.

      :returns: The number of states.


   .. py:property:: num_cpgs
      :type: int

      Get the number of CPGs in the structure.

      :returns: The number of CPGs.


   .. py:property:: output_indices
      :type: list[int]

      Get the index in the state array for each cpg, matching the order the CPGs were provided in.

      :returns: The indices.


   .. py:attribute:: cpgs
      :type: list[Cpg]

      

   .. py:attribute:: connections
      :type: set[CpgPair]

      

   .. py:method:: make_cpgs(num_cpgs: int) -> list[Cpg]
      :staticmethod:

      Create a list of CPGs.

      :param num_cpgs: The number of CPGs to create.
      :returns: The created list of CPGs.


   .. py:method:: make_connection_weights_matrix(internal_connection_weights: dict[Cpg, float], external_connection_weights: dict[CpgPair, float]) -> numpy.typing.NDArray[numpy.float_]

      Create a weight matrix from internal and external weights.

      :param internal_connection_weights: The internal weights.
      :param external_connection_weights: The external weights.
      :returns: The created matrix.


   .. py:method:: make_connection_weights_matrix_from_params(params: list[float]) -> numpy.typing.NDArray[numpy.float_]

      Create a connection weights matrix from a list if connections.

      :param params: The connections to create the matrix from.
      :returns: The created matrix.


   .. py:method:: make_uniform_state(value: float) -> numpy.typing.NDArray[numpy.float_]

      Make a state array by repeating the same value.

      Will match the required number of states in this structure.

      :param value: The value to use for all states
      :returns: The array of states.



