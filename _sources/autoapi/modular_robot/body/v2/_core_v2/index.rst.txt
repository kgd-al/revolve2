:orphan:

:py:mod:`_core_v2`
========================================

.. py:module:: modular_robot.body.v2._core_v2


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot.body.v2._core_v2.CoreV2




.. py:class:: CoreV2(rotation: float | modular_robot.body._right_angles.RightAngles, num_batteries: int = 1)


   Bases: :py:obj:`modular_robot.body.base.Core`

   .. autoapi-inheritance-diagram:: modular_robot.body.v2._core_v2.CoreV2
      :parts: 1

   The core module of a modular robot.

   .. py:property:: front_face
      :type: modular_robot.body.v2._attachment_face_core_v2.AttachmentFaceCoreV2

      Get the face attached to the front of the core.

      :returns: The attached module.


   .. py:property:: right_face
      :type: modular_robot.body.v2._attachment_face_core_v2.AttachmentFaceCoreV2

      Get the face attached to the right of the core.

      :returns: The attached module.


   .. py:property:: back_face
      :type: modular_robot.body.v2._attachment_face_core_v2.AttachmentFaceCoreV2

      Get the face attached to the back of the core.

      :returns: The attached module.


   .. py:property:: left_face
      :type: modular_robot.body.v2._attachment_face_core_v2.AttachmentFaceCoreV2

      Get the face attached to the left of the core.

      :returns: The attached module.


   .. py:property:: horizontal_offset
      :type: float

      Get the horizontal offset for attachment positions (in m).

      :return: The value.


   .. py:property:: vertical_offset
      :type: float

      Get the vertical offset for attachment positions (in m).

      :return: The value.


   .. py:property:: attachment_faces
      :type: dict[int, modular_robot.body.v2._attachment_face_core_v2.AttachmentFaceCoreV2]

      Get all attachment faces for the Core.

      :return: The attachment faces.


   .. py:attribute:: mass

      Here we produce the attachment faces, with the advanced logic behind conflict checking.



