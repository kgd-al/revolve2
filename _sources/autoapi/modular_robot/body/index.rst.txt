:py:mod:`body`
============================

.. py:module:: modular_robot.body

.. autoapi-nested-parse::

   Objects used for modular robot bodies.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   base/index.rst
   sensors/index.rst
   v1/index.rst
   v2/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot.body.AttachmentPoint
   modular_robot.body.Color
   modular_robot.body.Module
   modular_robot.body.RightAngles




.. py:class:: AttachmentPoint


   An attachment point is a theoretical location on the parent module for the child to be attached to.

   The attachment of a module to its parent is not considered to be a separate AttachmentPoint.
   This class simply is used for potential children to be placed on the correct positions of the current module.

   .. py:attribute:: orientation
      :type: pyrr.Quaternion

      The orientation of the attachment point on the module.


   .. py:attribute:: offset
      :type: pyrr.Vector3

      The offset for the attachment point, with respect to the center of the module.



.. py:class:: Color


   Represents a color in RGBA format.

   All values should from 0 to 255.

   .. py:attribute:: red
      :type: int

      

   .. py:attribute:: green
      :type: int

      

   .. py:attribute:: blue
      :type: int

      

   .. py:attribute:: alpha
      :type: int

      

   .. py:method:: to_normalized_rgba_list() -> list[float]

      Convert to rgba list where each value is between 0 and 1.

      :returns: The list.



.. py:class:: Module(orientation: pyrr.Quaternion, color: modular_robot.body._color.Color, attachment_points: dict[int, modular_robot.body._attachment_point.AttachmentPoint], sensors: list[modular_robot.body.sensors.Sensor])


   Base class for a module for modular robots.

   .. py:property:: uuid
      :type: uuid.UUID

      Get the uuid.

      :returns: The uuid.


   .. py:property:: orientation
      :type: pyrr.Quaternion

      Get the orientation of this model relative to its parent.

      :returns: The orientation.


   .. py:property:: parent
      :type: Module | None

      Get the parent module of this module.

      None if this module has not yet been added to a body or is the origin of the body.

      :returns: The parent module of this module, or None if this module has not yet been added to a body.


   .. py:property:: parent_child_index
      :type: int | None

      Index of this module in the parent modules child list.

      None if this module has not yet been added to a body.

      :returns: The index of this module in the parent modules child list, or None if this module has not yet been added to a body.


   .. py:property:: children
      :type: dict[int, Module]

      Get all children on this module.

      :return: The children and their respective attachment point index.


   .. py:property:: color
      :type: modular_robot.body._color.Color

      Get the color of this module.

      :returns: The color.


   .. py:property:: attachment_points
      :type: dict[int, modular_robot.body._attachment_point.AttachmentPoint]

      Get all attachment points of this module.

      :return: The attachment points.


   .. py:property:: sensors
      :type: _AttachedSensors

      Get the sensors.

      :return: The value.


   .. py:method:: set_child(module: Module, child_index: int) -> None

      Attach a module to certain AttachmentPoint.

      :param module: The module to attach.
      :param child_index: The index of the AttachmentPoint to attach it to.
      :raises KeyError: If attachment point is already populated.


   .. py:method:: can_set_child(child_index: int) -> bool

      Check if a child can be set on a specific attachment point on the module.

      :param child_index: The child index.
      :return: The boolean value.


   .. py:method:: neighbours(within_range: int) -> list[Module]

      Get the neighbours of this module with a certain range of the module tree.

      :param within_range: The range in which modules are considered a neighbour. Minimum is 1.
      :returns: The neighbouring modules.


   .. py:method:: add_sensor(sensor: modular_robot.body.sensors.Sensor) -> None

      Add a sensor to the module.

      :param sensor: The sensor.



.. py:class:: RightAngles(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   .. autoapi-inheritance-diagram:: modular_robot.body.RightAngles
      :parts: 1

   Standard angles at which some modular robot modules can be attached.

   .. py:attribute:: DEG_0
      :value: 0

      

   .. py:attribute:: DEG_90

      

   .. py:attribute:: DEG_180

      

   .. py:attribute:: DEG_270

      

   .. py:attribute:: RAD_0
      :value: 0

      

   .. py:attribute:: RAD_HALFPI

      

   .. py:attribute:: RAD_PI

      

   .. py:attribute:: RAD_ONEANDAHALFPI

      


