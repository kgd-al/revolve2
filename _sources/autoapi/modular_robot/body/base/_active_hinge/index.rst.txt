:orphan:

:py:mod:`_active_hinge`
===============================================

.. py:module:: modular_robot.body.base._active_hinge


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot.body.base._active_hinge.ActiveHinge




.. py:class:: ActiveHinge(rotation: float | modular_robot.body._right_angles.RightAngles, servo1_bounding_box: pyrr.Vector3, servo2_bounding_box: pyrr.Vector3, frame_bounding_box: pyrr.Vector3, frame_offset: float, servo_offset: float, frame_mass: float, servo1_mass: float, servo2_mass: float, joint_offset: float, static_friction: float, dynamic_friction: float, range: float, effort: float, velocity: float, armature: float, pid_gain_p: float, pid_gain_d: float, child_offset: float, sensors: list[modular_robot.body.sensors.Sensor])


   Bases: :py:obj:`modular_robot.body._module.Module`

   .. autoapi-inheritance-diagram:: modular_robot.body.base._active_hinge.ActiveHinge
      :parts: 1

   An Active Hinge Module.

   .. py:property:: attachment
      :type: modular_robot.body._module.Module | None

      Get the module attached to this hinge.

      :returns: The attachment points module.


   .. py:property:: static_friction
      :type: float

      Get the static friction.

      :return: The value.


   .. py:property:: dynamic_friction
      :type: float

      Get the dynamic friction.

      :return: The value.


   .. py:property:: range
      :type: float

      Get the range of the servo.

      :return: The value.


   .. py:property:: effort
      :type: float

      Get the effort of the servo.

      :return: The value.


   .. py:property:: velocity
      :type: float

      Get the velocity of the servo.

      :return: The value.


   .. py:property:: servo1_bounding_box
      :type: pyrr.Vector3

      Get the bounding box of the first servo part.

      Sizes are total length, not half-length from origin.
      :return: Vector3 with sizes of bbox in x,y,z dimension (m).


   .. py:property:: servo2_bounding_box
      :type: pyrr.Vector3

      Get the bounding box of the second servo part.

      Sizes are total length, not half-length from origin.
      :return: Vector3 with sizes of bbox in x,y,z dimension (m).


   .. py:property:: frame_bounding_box
      :type: pyrr.Vector3

      Get the bounding box of the frame.

      Sizes are total length, not half-length from origin.
      :return: Vector3 with sizes of bbox in x,y,z dimension (m).


   .. py:property:: frame_offset
      :type: float

      Get the offset of the frame (in m).

      :return: The value.


   .. py:property:: servo_offset
      :type: float

      Get the servo offset (in m).

      :return: The value.


   .. py:property:: frame_mass
      :type: float

      Get the frame mass (in kg).

      :return: The value.


   .. py:property:: servo1_mass
      :type: float

      Get the mass of the first servo part (in kg).

      :return: The value.


   .. py:property:: servo2_mass
      :type: float

      Get the mass of the second servo part (in kg).

      :return: The value.


   .. py:property:: joint_offset
      :type: float

      Get the joint offset (in m).

      :return: The value.


   .. py:property:: armature
      :type: float

      Get the armature of the joint.

      This represents the inertia of the motor itself when nothing is attached.

      :return: The value.


   .. py:property:: pid_gain_p
      :type: float

      Get the proportional gain of the pid position controller.

      :return: The value.


   .. py:property:: pid_gain_d
      :type: float

      Get the derivative gain of the pid position controller.

      :return: The value.


   .. py:attribute:: ATTACHMENT
      :value: 0

      

   .. py:attribute:: attachment_points

      The base module only has orientation as its parameter since not all modules are square.

      Here we covert the angle of the module to its orientation in space.



