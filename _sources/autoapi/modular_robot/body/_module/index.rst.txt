:orphan:

:py:mod:`_module`
====================================

.. py:module:: modular_robot.body._module


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot.body._module.Module




.. py:class:: Module(orientation: pyrr.Quaternion, color: modular_robot.body._color.Color, attachment_points: dict[int, modular_robot.body._attachment_point.AttachmentPoint], sensors: list[modular_robot.body.sensors.Sensor])


   Base class for a module for modular robots.

   .. py:property:: uuid
      :type: uuid.UUID

      Get the uuid.

      :returns: The uuid.


   .. py:property:: orientation
      :type: pyrr.Quaternion

      Get the orientation of this model relative to its parent.

      :returns: The orientation.


   .. py:property:: parent
      :type: Module | None

      Get the parent module of this module.

      None if this module has not yet been added to a body or is the origin of the body.

      :returns: The parent module of this module, or None if this module has not yet been added to a body.


   .. py:property:: parent_child_index
      :type: int | None

      Index of this module in the parent modules child list.

      None if this module has not yet been added to a body.

      :returns: The index of this module in the parent modules child list, or None if this module has not yet been added to a body.


   .. py:property:: children
      :type: dict[int, Module]

      Get all children on this module.

      :return: The children and their respective attachment point index.


   .. py:property:: color
      :type: modular_robot.body._color.Color

      Get the color of this module.

      :returns: The color.


   .. py:property:: attachment_points
      :type: dict[int, modular_robot.body._attachment_point.AttachmentPoint]

      Get all attachment points of this module.

      :return: The attachment points.


   .. py:property:: sensors
      :type: _AttachedSensors

      Get the sensors.

      :return: The value.


   .. py:method:: set_child(module: Module, child_index: int) -> None

      Attach a module to certain AttachmentPoint.

      :param module: The module to attach.
      :param child_index: The index of the AttachmentPoint to attach it to.
      :raises KeyError: If attachment point is already populated.


   .. py:method:: can_set_child(child_index: int) -> bool

      Check if a child can be set on a specific attachment point on the module.

      :param child_index: The child index.
      :return: The boolean value.


   .. py:method:: neighbours(within_range: int) -> list[Module]

      Get the neighbours of this module with a certain range of the module tree.

      :param within_range: The range in which modules are considered a neighbour. Minimum is 1.
      :returns: The neighbouring modules.


   .. py:method:: add_sensor(sensor: modular_robot.body.sensors.Sensor) -> None

      Add a sensor to the module.

      :param sensor: The sensor.



