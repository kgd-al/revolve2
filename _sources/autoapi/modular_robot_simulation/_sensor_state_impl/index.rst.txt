:orphan:

:py:mod:`_sensor_state_impl`
=====================================================

.. py:module:: modular_robot_simulation._sensor_state_impl

.. autoapi-nested-parse::

   Sensor state implementations for the simulations.



Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot_simulation._sensor_state_impl.ActiveHingeSensorStateImpl
   modular_robot_simulation._sensor_state_impl.CameraSensorStateImpl
   modular_robot_simulation._sensor_state_impl.IMUSensorStateImpl
   modular_robot_simulation._sensor_state_impl.ModularRobotSensorStateImpl




.. py:class:: ActiveHingeSensorStateImpl(simulation_state: revolve2.simulation.scene.SimulationState, hinge_joint: revolve2.simulation.scene.JointHinge)


   Bases: :py:obj:`revolve2.modular_robot.sensor_state.ActiveHingeSensorState`

   .. autoapi-inheritance-diagram:: modular_robot_simulation._sensor_state_impl.ActiveHingeSensorStateImpl
      :parts: 1

   Implements the active hinge sensor state.

   .. py:property:: position
      :type: float

      Get the measured position of the active hinge.

      :returns: The measured position.



.. py:class:: CameraSensorStateImpl(simulation_state: revolve2.simulation.scene.SimulationState, multi_body_system: revolve2.simulation.scene.MultiBodySystem, camera: revolve2.simulation.scene.sensors.CameraSensor)


   Bases: :py:obj:`revolve2.modular_robot.sensor_state.CameraSensorState`

   .. autoapi-inheritance-diagram:: modular_robot_simulation._sensor_state_impl.CameraSensorStateImpl
      :parts: 1

   The simulation implementation of the camera sensor state.

   .. py:property:: image
      :type: numpy.typing.NDArray[numpy.uint8]

      Get the current image.

      :returns: The image.



.. py:class:: IMUSensorStateImpl(simulation_state: revolve2.simulation.scene.SimulationState, multi_body_system: revolve2.simulation.scene.MultiBodySystem, imu: revolve2.simulation.scene.sensors.IMUSensor)


   Bases: :py:obj:`revolve2.modular_robot.sensor_state.IMUSensorState`

   .. autoapi-inheritance-diagram:: modular_robot_simulation._sensor_state_impl.IMUSensorStateImpl
      :parts: 1

   Implements the  IMU sensor state.

   .. py:property:: specific_force
      :type: pyrr.Vector3

      Get the measured specific force.

      :returns: The measured specific force.


   .. py:property:: angular_rate
      :type: pyrr.Vector3

      Get the measured angular rate.

      :returns: The measured angular rate.


   .. py:property:: orientation
      :type: pyrr.Quaternion

      Get the measured orientation.

      :returns: The measured position.



.. py:class:: ModularRobotSensorStateImpl(simulation_state: revolve2.simulation.scene.SimulationState, body_to_multi_body_system_mapping: modular_robot_simulation._build_multi_body_systems.BodyToMultiBodySystemMapping)


   Bases: :py:obj:`revolve2.modular_robot.sensor_state.ModularRobotSensorState`

   .. autoapi-inheritance-diagram:: modular_robot_simulation._sensor_state_impl.ModularRobotSensorStateImpl
      :parts: 1

   Implementation for ModularRobotSensorState.

   .. py:method:: get_active_hinge_sensor_state(sensor: revolve2.modular_robot.body.sensors.ActiveHingeSensor) -> revolve2.modular_robot.sensor_state.ActiveHingeSensorState

      Get the state of the provided active hinge sensor.

      :param sensor: The sensor.
      :returns: The state.


   .. py:method:: get_imu_sensor_state(sensor: revolve2.modular_robot.body.sensors.IMUSensor) -> revolve2.modular_robot.sensor_state.IMUSensorState

      Get the state of the provided IMU sensor.

      :param sensor: The IMU sensor.
      :returns: The IMU sensor state.


   .. py:method:: get_camera_sensor_state(sensor: revolve2.modular_robot.body.sensors.CameraSensor) -> revolve2.modular_robot.sensor_state.CameraSensorState

      Get the state of the camera sensor.

      :param sensor: The camera sensor.
      :returns: The camera sensor state.



